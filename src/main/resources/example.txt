package koreatech.cse.controller;


import koreatech.cse.domain.dbpia.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.List;

@Controller
@RequestMapping("/dbpia")
public class DbpiaController {

    List<ItemType> itemTypes;

    public String dbpia_key = "50929d84fe30e41a00d02a66fddfffff";
    public String dbpia_url = "http://api.dbpia.co.kr/v1/search/search.xml";
    public String dbpia_url2 = "&target=se&searchall=";
    public String dbpia_url3 = "&category=4";

    @RequestMapping("/")
    public String dbpia(){
        return "dbpia/index";
    }


    @RequestMapping("/getDbpia")
    public String getSpringerResponse(Model model,String search) {

        System.out.println("search : " + search);
        RestTemplate restTemplate = new RestTemplate();
        try {
            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(dbpia_url)
                    .queryParam("key", dbpia_key)
                    .queryParam("target", "se")
                    .queryParam("searchall", search)
                    .queryParam("category", "4");

            System.out.println(builder.build().encode().toUri());

            RootType dbpiaType = restTemplate.getForObject(builder.build().encode().toUri(),
                    RootType.class);
            System.out.println(dbpiaType);

            model.addAttribute("dbpia",dbpiaType.getResult().getItems().getItem());

            itemTypes = dbpiaType.getResult().getItems().getItem();

            for(ItemType item : itemTypes){

                System.out.println("Title : " + item.getTitle());
                System.out.println("Ctype : " + item.getCtype());
                for(AuthorType authorType :item.getAuthors().getAuthor()){
                    System.out.println("AuthorName : " + authorType.getName());
                    System.out.println("AuthorOrder : " + authorType.getOrder());
                    System.out.println("AuthorUrl : " + authorType.getUrl());
                }
                System.out.println("PublisherName : " + item.getPublisher().getName());
                System.out.println("PublisherUrl : " + item.getPublisher().getUrl());
                System.out.println("PublicationName : " + item.getPublication().getName());
                System.out.println("PublicationUrl : " + item.getPublication().getUrl());
                System.out.println("PublicationIssn : " + item.getPublication().getIssn());
                System.out.println("IssueName : " + item.getIssue().getName());
                System.out.println("IssueNum : " + item.getIssue().getNum());
                System.out.println("IssueYymm : " + item.getIssue().getYymm());
                System.out.println("Pages : " + item.getPages());
                System.out.println("Preview : " + item.getPreview());
                System.out.println();
            }


        }catch (HttpClientErrorException e) {
            System.out.println("오류다 : " + e.getStatusCode() + ": " + e.getStatusText());
        }


        return "dbpia/index";
    }

    public List<ItemType> getDbpia(String search) {

        System.out.println("search : " + search);
        RestTemplate restTemplate = new RestTemplate();
        try {
            UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(dbpia_url)
                    .queryParam("key", dbpia_key)
                    .queryParam("target", "se")
                    .queryParam("searchall", search)
                    .queryParam("category", "4");

            System.out.println("dbpia : " + builder.build().encode().toUri());

            RootType dbpiaType = restTemplate.getForObject(builder.build().encode().toUri(),
                    RootType.class);

            itemTypes = dbpiaType.getResult().getItems().getItem();

            return itemTypes;

        }catch (HttpClientErrorException e) {
            System.out.println("오류다 : " + e.getStatusCode() + ": " + e.getStatusText());
        }
        return itemTypes;
    }
}
------------------------------------------------------------------------------------------------------------------------------

package koreatech.cse.domain;

import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import java.util.ArrayList;
import java.util.List;


/**
 * <p>authorsType complex type에 대한 Java 클래스입니다.
 *
 * <p>다음 스키마 단편이 이 클래스에 포함되는 필요한 콘텐츠를 지정합니다.
 *
 * <pre>
 * &lt;complexType name="authorsType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="author" type="{}authorType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 *
 *
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "authorsType", propOrder = {
    "author"
})
public class AuthorsType {

    @JacksonXmlElementWrapper(useWrapping=false)
    protected List<AuthorType> author;

    /**
     * Gets the value of the author property.
     *
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the author property.
     *
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAuthor().add(newItem);
     * </pre>
     *
     *
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AuthorType }
     *
     *
     */
    public List<AuthorType> getAuthor() {
        if (author == null) {
            author = new ArrayList<AuthorType>();
        }
        return this.author;
    }

    @Override
    public String toString() {
        return "AuthorsType{" +
                "author=" + author +
                '}';
    }
}
